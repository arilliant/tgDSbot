import json
import aiohttp
import logging
import asyncio
from config.settings import settings
from services.context import dialog_context
from utils.helpers import process_content

logger = logging.getLogger(__name__)

class OpenRouterService:
    @staticmethod
    async def chat_stream(prompt: str, message, bot):
        chat_id = message.chat.id
        history = dialog_context.get_dialog_history(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏
        if not history or history[0].get("role") != "system":
            system_prompt = settings.SYSTEM_PROMPT
            history = [{"role": "system", "content": system_prompt}] + history

        headers = {
            "Authorization": f"Bearer {settings.OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        dialog_context.add_to_dialog_history(chat_id, "user", prompt)
        
        payload = {
            "model": settings.MODEL,
            "messages": history + [{"role": "user", "content": prompt}],
            "stream": True
        }

        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        MAX_MSG_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
        UPDATE_INTERVAL = 2.0  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        UPDATE_CHUNK_SIZE = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        full_response = ""
        current_part = 1
        parts = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", parse_mode="Markdown")
        last_update_time = asyncio.get_event_loop().time()
        last_update_length = 0
        buffer = ""

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=90)) as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"API error: {response.status} - {error_text}")
                        await response_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
                        return ""

                    async for chunk in response.content:
                        chunk_str = chunk.decode('utf-8').strip()
                        if not chunk_str.startswith('data:'):
                            continue

                        try:
                            if chunk_str == "data: [DONE]":
                                break
                                
                            data = json.loads(chunk_str[5:])
                            if "choices" in data and data["choices"]:
                                delta = data["choices"][0].get("delta", {})
                                if "content" in delta:
                                    content = process_content(delta["content"])
                                    buffer += content
                                    full_response += content
                                    
                                    current_time = asyncio.get_event_loop().time()
                                    enough_new_content = len(buffer) - last_update_length >= UPDATE_CHUNK_SIZE
                                    enough_time_passed = current_time - last_update_time >= UPDATE_INTERVAL
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
                                    if len(buffer) > MAX_MSG_LENGTH:
                                        # C–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                                        parts.append(buffer)
                                        # –í–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                                        if buffer:
                                            await response_message.edit_text(f"{buffer}\n\n–ß–∞—Å—Ç—å {current_part}/{current_part}...", parse_mode="Markdown")
                                        
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                                        response_message = await message.answer("‚è≥ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")
                                        buffer = ""
                                        last_update_length = 0
                                        current_part += 1
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                                    if (enough_time_passed or enough_new_content) and buffer:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
                                        if current_part > 1:
                                            await response_message.edit_text(f"{buffer}\n\n–ß–∞—Å—Ç—å {current_part}/{current_part}...", parse_mode="Markdown")
                                        else:
                                            await response_message.edit_text(buffer, parse_mode="Markdown")
                                        last_update_time = current_time
                                        last_update_length = len(buffer)
                                    
                        except json.JSONDecodeError as e:
                            logger.warning(f"JSON decode error: {e}")
                        except Exception as e:
                            logger.error(f"Error processing chunk: {e}", exc_info=True)

                    # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if buffer:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
                        if current_part > 1:
                            parts.append(buffer)
                            await response_message.edit_text(f"{buffer}\n\n–ß–∞—Å—Ç—å {current_part}/{current_part}", parse_mode="Markdown")
                        else:
                            await response_message.edit_text(buffer, parse_mode="Markdown")
                    else:
                        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await response_message.edit_text("ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                    if full_response:
                        dialog_context.add_to_dialog_history(chat_id, "assistant", full_response)
                    
                    return full_response

        except aiohttp.ClientError as e:
            logger.error(f"API connection error: {str(e)}", exc_info=True)
            await response_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
            return ""
        except asyncio.TimeoutError:
            logger.error("API request timed out", exc_info=True)
            await response_message.edit_text(f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π")
            return ""
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}", exc_info=True)
            await response_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            return ""